generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    courses       Course[]
    tasks         Task[]
    sharedTasks   Task[]    @relation("SharedUsers")
}

model Course {
    id             String    @id @default(cuid())
    userId         String
    user           User      @relation(fields: [userId], references: [id])
    courseName     String
    instructorName String?
    startDate      DateTime?
    endDate        DateTime?
    daysOfWeek     String?
    colorCode      String
    notes          String
    tasks           Task[]

    @@index([userId])
}

model Task {
    id                      String   @id @default(cuid())
    userId                  String
    courseId                String
    user                    User     @relation(fields: [userId], references: [id])
    course                  Course   @relation(fields: [courseId], references: [id])
    description             String?
    dueDate                 DateTime
    priority                String
    status                  String
    estimatedCompletionDate DateTime
    actualCompletionDate    DateTime
    sharedUsers             User[]   @relation(name: "SharedUsers")

    @@index([userId])
    @@index([courseId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
